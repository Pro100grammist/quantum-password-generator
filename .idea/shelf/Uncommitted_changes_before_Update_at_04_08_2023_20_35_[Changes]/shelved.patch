Index: generator/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.test import TestCase\n\n# Create your tests here.\n\nfrom string import ascii_letters, digits, punctuation\nfrom random import choices\n\n\ndef password(request):\n    return ''.join(choices(list(ascii_letters), k=request))\n\n\nprint(password(12))\nprint(digits + 'qwerty')\nprint(punctuation)\nprint(type(ascii_letters))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/generator/tests.py b/generator/tests.py
--- a/generator/tests.py	(revision 0c5f766ff1f4520e127c3a3ca9bff494d069f768)
+++ b/generator/tests.py	(date 1691166961824)
@@ -1,16 +1,37 @@
 from django.test import TestCase
 
 # Create your tests here.
+import re
+import math
+
 
-from string import ascii_letters, digits, punctuation
-from random import choices
+bruteforce_speed_per_second = 1000000000  # Estimated password brute force speed
 
+def check_password_strength(password):
+    bruteforce_speed_per_second = 1000000000  #
 
-def password(request):
-    return ''.join(choices(list(ascii_letters), k=request))
 
+    # Рассчитываем сложность пароля на основе длины и набора символов
+    character_set = 26 + 26 + 10 + 15  # буквы верхнего и нижнего регистра, цифры и специальные символы
+    password_complexity = character_set ** len(password)
 
-print(password(12))
-print(digits + 'qwerty')
-print(punctuation)
-print(type(ascii_letters))
+    # Рассчитываем приблизительное количество секунд на взлом пароля брутфорсом
+    seconds_to_crack = password_complexity / bruteforce_speed_per_second
+    time_estimate = seconds_to_crack
+
+    if time_estimate < 1:
+        time_estimate = "< 1 секунды"
+    elif time_estimate < 60:
+        time_estimate = "{} секунд".format(int(time_estimate))
+    elif time_estimate < 3600:
+        time_estimate = "{} минут".format(int(time_estimate / 60))
+    else:
+        time_estimate = "{} часов".format(math.ceil(time_estimate / 3600))
+
+    return "Пароль надежен. Время взлома: примерно {}".format(time_estimate)
+
+
+# Пример использования
+password = input("Введите пароль: ")
+result = check_password_strength(password)
+print(result)
\ No newline at end of file
